#!/bin/bash

cd /usr/hp

source /usr/hp/common_functions

# This is bad probably
sudo echo "Forcing password entry for sudo, if not already done so" > /dev/null

function kill_monitoring {
	# Stop all monitoring processes that may be running
	echo "KILLING MONITOR PROCESSES FOR $1" >> /usr/hp/monitor.log
	# Kill all tail processes
	sudo pkill -f "tail -fn0 /vz/private/$1"
	# Kill the monitoring processes themselves
	pkill -f monitor_.*$1
}

function start_hp {

	echo "STARTING HP $1" >> /usr/hp/monitor.log

	# Setup command monitoring
	nohup /usr/hp/monitor_commands $1 >> /usr/hp/monitor.log 2>> /usr/hp/monitor.log &

	# Setup SSH monitoring
	nohup /usr/hp/monitor_ssh $1 >> /usr/hp/monitor.log 2>> /usr/hp/monitor.log &

	# Setup download monitoring
	nohup /usr/hp/monitor_downloads $1 >> /usr/hp/monitor.log 2>> /usr/hp/monitor.log &

	# Create CRON job for getting p0f logs
	# TODO
}

## Grab the command passed in to the function
cmd=$1

# Pass in the command to check as $1 (start, restart, etc.) and the typed command (hpctl sta, etc.) as $2
# Returns the number of 
function command_matches {
	if [[ $1 =~ ^$cmd ]]; then
		count=0
		commands="start stop status restart"
		for command in $commands; do
			if [[ $command =~ ^$cmd ]]; then
				# Increment the count of commands that match
				count=$(($count + 1))
			fi
		done

		# If only one argument matches, we know it must be the passed in one
		if [ $count -eq 1 ]; then
			return 0
		fi
	fi
	return 1
}

if command_matches "start"
then
	
	hps="$hp_1 $hp_2"

	# If a honeypot number is provided, only restart that honeypot
	if [ $# -eq 2 ] && ([ "$2" == "$hp_1" ] || [ "$2" == "$hp_2" ])
	then
		hps="$2"
	fi

	for hp in $hps; do
		# Stop current monitoring processes
		kill_monitoring $hp

		# Start processes
		start_hp $hp
	done

elif command_matches "stop"
then
	
	kill_monitoring $2

	echo "STOPPING HP $2" >> /usr/hp/monitor.log

	# Remove CRON job for getting p0f logs
	# TODO

elif command_matches "status"
then
	
	echo 

	for hp in $hp_1 $hp_2; do
		
		echo "======================"
		echo "==== HONEYPOT $hp ===="
		echo "======================"

		# Check that all monitoring processes are running
		for command in monitor_commands monitor_ssh monitor_downloads; do
			echo -n "$command..."
			if echo "`ps aux`" | grep "$command $hp" | grep -qv grep
			then
				echo "GOOD"
			else
				echo "STOPPED"
			fi
		done
		
		# Check that all tail processes are running
		echo -n "Tail processes..."
		tail_ps="`ps aux | grep "tail.*$hp" | grep -vE "(sudo|grep)" | wc -l`"
		if [ "$tail_ps" == "3" ]
		then
			echo "GOOD"
		else
			echo "($tail_ps/3)"
		fi

		# Check that the container is started
		echo -n "Container status..."
		vzstatus="`sudo vzctl status $hp`"
		if [ "$vzstatus" == "CTID $hp exist mounted running" ]; then
			echo "GOOD"
		else
			echo "$vzstatus"
		fi

		# Check that the container has internet
		echo -n "Checking Internet Access..."
		sudo vzctl exec $hp "ping -w5 -c3 8.8.8.8 > /dev/null 2>&1 && echo 'GOOD' || (echo 'DOWN' && exit 1)"

		echo
		echo "==== Statistics ===="

		# Check if the honeypot is currently compromised
		echo -n "Compromised..."
		if echo "db.logs.find({ctid: $hp}, {_id: 0, level: 1}).sort({timestamp: -1}).limit(1)" | mongo --quiet 10.3.0.2/hpdata | grep -q RECYCLE; then
			echo "NO"
		else
			echo "YES"
			echo -n "Compromised Since..."
			iso_time=`echo "db.logs.find({ctid: $hp}, {_id: 0, timestamp: 1}).sort({timestamp: -1}).limit(1)" | mongo --quiet 10.3.0.2/hpdata | cut -d"\"" -f4`
			date -d"$iso_time" +"%m/%d/%y %r"
		fi

		# Output the number of recycles (aka sessions) since the start
		echo -n "Total Number of Complete Sessions..."
		echo "db.logs.find({level: 'RECYCLE', ctid: $hp}).count()" | mongo --quiet 10.3.0.2/hpdata
		
		# Output the number of hackers in the last day
		echo -n "Number of Connections Today..."
		echo "db.logs.find({level: 'CONNECT', ctid: $hp, timestamp: {\$gte: new Date(`date -d'yesterday' +%s` * 1000)}}).count()" | mongo --quiet 10.3.0.2/hpdata

		# Output the last recycle date
		echo -n "Last Recycle At..."
		iso_time=`echo "db.logs.find({level: 'RECYCLE', ctid: $hp}, {_id: 0, timestamp: 1}).sort({timestamp: -1}).limit(1)" | mongo --quiet 10.3.0.2/hpdata | cut -d"\"" -f4`
		if [ "$iso_time" == "" ]; then
			echo "NONE"
		else
			date -d"$iso_time" +"%m/%d/%y %r"
		fi

		# Check that the firewall is running
		echo
		echo "==== Open Ports ===="
		nmap `get_hp_ip $hp` | sed -n '1,/SERVICE/d;/Nmap done/q;p' | grep -v ^$

		echo
	
	done

	echo "======================="
	echo "==== Overall Stats ===="
	echo "======================="

	# Check that mongod is running on storage
	echo -n "MongoDB..."
	if [ `ssh aces@10.3.0.2 "ps aux | grep mongod | grep -v grep | wc -l"` -gt 0 ]; then
		echo "GOOD"
	else
		echo "OFF"
	fi

	# Check that the Nagios server is running
	# TODO

	echo

elif command_matches "restart"
then

	echo ""
	echo "========================================================"
	echo "Do not use this command once the honeypots are deployed!"
	echo "ALL DATA WILL BE ERASED, PRESS ANY KEY TO CONTINUE......"
	echo "========================================================"
	echo ""

	# Check that the user wants to delete all data
	echo -n ".... "
	read

	hpctl stop

	if [ $# -eq 3 ] && [ "$3" == "recycle" ]
	then
		# Recycle the honeypots
		recycle $hp_1 override
		recycle $hp_2 override
	fi

	# Remove all files
	rm -f /usr/hp/ids_$hp_1.log /usr/hp/ids_$hp_2.log /usr/hp/monitor.log /usr/hp/$hp_1.lock /usr/hp/$hp_2.lock

	# Remove directories from storage vm
	ssh -f aces@10.3.0.2 "cd ~/data; rm -rf 5*"

	# Drop DB's in Mongo
	mongo_write "db.sessions.drop(); db.logs.drop()"

	hpctl start

	hpctl status

else
	echo "Usage: $0 [start|stop|status|restart] [optional ctid]"
	exit 1
fi

