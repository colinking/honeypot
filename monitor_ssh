#!/bin/bash


if [ $# -ne 1 ]
then
	echo "Usage: $0 [honeypot-number] "
	exit 1
fi

# Include the functions that we'll use between scripts
source /usr/hp/common_functions

#echo "Running tail on /var/log/auth.log in container #$1...";

sudo tail -fn0 /vz/private/$1/var/log/auth.log 2>> /usr/hp/monitor.log | while read line; do
	
	# Check that this line portrays to ssh-ing, exit if not
	if ! echo "$line" | grep -lq "ovzhost sshd" ;
	then
		continue
	fi

	# Check if the log message is a conneciton/disconnection message
	# Case: Mar 16 16:18:30 ovzhost sshd[8588]: Accepted password for root from 128.8.68.127 port 57278 ssh2
	if echo "$line" | grep -q "Accepted password for root from" ;
	then
		echo "MONITOR_SSH: $line"
		echo "Logon Detected"

		# Temp fix if multiple users log in at once
		if [ ! -e /usr/hp/$1.lock ]
		then
			# Get the timestamp of the connection
			datestring="`echo "$line" | cut -d" " -f1-3`"
			converted_time="`date -d"$datestring" +%s`"

			# Get the IP Address of the connecter
			ip="`echo $line | cut -d" " -f11`"

			# Get the port that they are connecting to
			port="`echo $line | cut -d" " -f13`"

			# Get the IP address of the honeypot they are connecting to
			hp_ip=`get_hp_ip $1`

			# Get info on the IP from Geobytes
			info=`curl http://gd.geobytes.com/GetCityDetails?fqcn=$ip 2> /dev/null`

			# Create the new MongoDB session to store this session's information
			mongo_write "db.sessions.insert({connect: new Date(), ip: '$ip', info: $info, port: '$port', hp_ip: '$hp_ip', password: 'password'})"

			# Get the ID of this session from mongo
			id="`get_id`"

			# Log the IP and ID of the hacker on the system
			echo "$id:$ip" > /usr/hp/$1.lock
			echo -n "$converted_time|$id|" >> /usr/hp/ids_$1.log

			# Create a directory for this session on the storage vm
			ssh -f aces@10.3.0.2 "mkdir ~/data/$id; mkdir ~/data/$id/downloads; touch ~/data/$id/logs_command" 2>> /usr/hp/monitor.log

			# Set the container to recycle in 30 minutes
			echo "recycle $1 $id 'yes'" | at now + 30 minutes

		fi

		# Log the connection at this timestamp and ip
		log_connection $1 "$ip"

	# Case: Mar 16 16:18:41 ovzhost sshd[8588]: Received disconnect from 128.8.68.127: 11: disconnected by user
	elif echo "$line" | grep -Eq "Received disconnect from.*disconnected by user" ;
	then

		echo "MONITOR_SSH: $line"
		echo "Logoff detected"

		# Temp fix for if multiple users log in at same time
		if [ -e /usr/hp/$1.lock ]
		then

			# Get the disconnect time
			datestring="`echo "$line" | cut -d" " -f1-3`"
			converted_time="`date -d"$datestring" +%s`"

			# Get the ID of the currently logged in hacker
			id="`cut -d":" -f1 /usr/hp/$1.lock`"

			# Log the disconnnect
			if [ ! -s ids_$1.log ]
			then
				# The file is empty, so echo the object id too
				echo "|$id|$converted_time" >> ids_$1.log
			else
				# Just echo the disconnect time
				echo "$converted_time" >> ids_$1.log
			fi

			# Recycle the honeypot
			recycle $1 $id "no"
		fi
	fi
done

echo "Exited loop - error?"